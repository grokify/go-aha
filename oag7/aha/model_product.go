/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
	"time"
)

// checks if the Product type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Product{}

// Product struct for Product
type Product struct {
	// A unique identifier for the product.
	Id *string `json:"id,omitempty"`
	// The reference prefix slug for the product.
	ReferencePrefix *string `json:"reference_prefix,omitempty"`
	// The name for the product.
	Name *string `json:"name,omitempty"`
	// Whether the product is a product line or not.
	ProductLine *bool `json:"product_line,omitempty"`
	// The date-time when the product was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date-time when the product was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// User URL for the project.
	Url *string `json:"url,omitempty"`
	// User URL for the project.
	Resource *string `json:"resource,omitempty"`
	// Whether the product has ideas or not.
	HasIdeas *bool `json:"has_ideas,omitempty"`
	// Whether the product has master features or not.
	HasMasterFeatures *bool `json:"has_master_features,omitempty"`
}

// NewProduct instantiates a new Product object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct() *Product {
	this := Product{}
	return &this
}

// NewProductWithDefaults instantiates a new Product object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductWithDefaults() *Product {
	this := Product{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Product) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Product) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Product) SetId(v string) {
	o.Id = &v
}

// GetReferencePrefix returns the ReferencePrefix field value if set, zero value otherwise.
func (o *Product) GetReferencePrefix() string {
	if o == nil || IsNil(o.ReferencePrefix) {
		var ret string
		return ret
	}
	return *o.ReferencePrefix
}

// GetReferencePrefixOk returns a tuple with the ReferencePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetReferencePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.ReferencePrefix) {
		return nil, false
	}
	return o.ReferencePrefix, true
}

// HasReferencePrefix returns a boolean if a field has been set.
func (o *Product) HasReferencePrefix() bool {
	if o != nil && !IsNil(o.ReferencePrefix) {
		return true
	}

	return false
}

// SetReferencePrefix gets a reference to the given string and assigns it to the ReferencePrefix field.
func (o *Product) SetReferencePrefix(v string) {
	o.ReferencePrefix = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Product) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Product) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Product) SetName(v string) {
	o.Name = &v
}

// GetProductLine returns the ProductLine field value if set, zero value otherwise.
func (o *Product) GetProductLine() bool {
	if o == nil || IsNil(o.ProductLine) {
		var ret bool
		return ret
	}
	return *o.ProductLine
}

// GetProductLineOk returns a tuple with the ProductLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetProductLineOk() (*bool, bool) {
	if o == nil || IsNil(o.ProductLine) {
		return nil, false
	}
	return o.ProductLine, true
}

// HasProductLine returns a boolean if a field has been set.
func (o *Product) HasProductLine() bool {
	if o != nil && !IsNil(o.ProductLine) {
		return true
	}

	return false
}

// SetProductLine gets a reference to the given bool and assigns it to the ProductLine field.
func (o *Product) SetProductLine(v bool) {
	o.ProductLine = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Product) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Product) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Product) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Product) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Product) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Product) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Product) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Product) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Product) SetUrl(v string) {
	o.Url = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Product) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Product) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *Product) SetResource(v string) {
	o.Resource = &v
}

// GetHasIdeas returns the HasIdeas field value if set, zero value otherwise.
func (o *Product) GetHasIdeas() bool {
	if o == nil || IsNil(o.HasIdeas) {
		var ret bool
		return ret
	}
	return *o.HasIdeas
}

// GetHasIdeasOk returns a tuple with the HasIdeas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetHasIdeasOk() (*bool, bool) {
	if o == nil || IsNil(o.HasIdeas) {
		return nil, false
	}
	return o.HasIdeas, true
}

// HasHasIdeas returns a boolean if a field has been set.
func (o *Product) HasHasIdeas() bool {
	if o != nil && !IsNil(o.HasIdeas) {
		return true
	}

	return false
}

// SetHasIdeas gets a reference to the given bool and assigns it to the HasIdeas field.
func (o *Product) SetHasIdeas(v bool) {
	o.HasIdeas = &v
}

// GetHasMasterFeatures returns the HasMasterFeatures field value if set, zero value otherwise.
func (o *Product) GetHasMasterFeatures() bool {
	if o == nil || IsNil(o.HasMasterFeatures) {
		var ret bool
		return ret
	}
	return *o.HasMasterFeatures
}

// GetHasMasterFeaturesOk returns a tuple with the HasMasterFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetHasMasterFeaturesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMasterFeatures) {
		return nil, false
	}
	return o.HasMasterFeatures, true
}

// HasHasMasterFeatures returns a boolean if a field has been set.
func (o *Product) HasHasMasterFeatures() bool {
	if o != nil && !IsNil(o.HasMasterFeatures) {
		return true
	}

	return false
}

// SetHasMasterFeatures gets a reference to the given bool and assigns it to the HasMasterFeatures field.
func (o *Product) SetHasMasterFeatures(v bool) {
	o.HasMasterFeatures = &v
}

func (o Product) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Product) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferencePrefix) {
		toSerialize["reference_prefix"] = o.ReferencePrefix
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProductLine) {
		toSerialize["product_line"] = o.ProductLine
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.HasIdeas) {
		toSerialize["has_ideas"] = o.HasIdeas
	}
	if !IsNil(o.HasMasterFeatures) {
		toSerialize["has_master_features"] = o.HasMasterFeatures
	}
	return toSerialize, nil
}

type NullableProduct struct {
	value *Product
	isSet bool
}

func (v NullableProduct) Get() *Product {
	return v.value
}

func (v *NullableProduct) Set(val *Product) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct(val *Product) *NullableProduct {
	return &NullableProduct{value: val, isSet: true}
}

func (v NullableProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
