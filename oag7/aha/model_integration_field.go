/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the IntegrationField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationField{}

// IntegrationField struct for IntegrationField
type IntegrationField struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Value string `json:"value"`
	IntegrationId string `json:"integration_id"`
	ServiceName string `json:"service_name"`
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _IntegrationField IntegrationField

// NewIntegrationField instantiates a new IntegrationField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationField(id string, name string, value string, integrationId string, serviceName string, createdAt time.Time) *IntegrationField {
	this := IntegrationField{}
	this.Id = id
	this.Name = name
	this.Value = value
	this.IntegrationId = integrationId
	this.ServiceName = serviceName
	this.CreatedAt = createdAt
	return &this
}

// NewIntegrationFieldWithDefaults instantiates a new IntegrationField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationFieldWithDefaults() *IntegrationField {
	this := IntegrationField{}
	return &this
}

// GetId returns the Id field value
func (o *IntegrationField) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegrationField) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IntegrationField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationField) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *IntegrationField) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *IntegrationField) SetValue(v string) {
	o.Value = v
}

// GetIntegrationId returns the IntegrationId field value
func (o *IntegrationField) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *IntegrationField) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetServiceName returns the ServiceName field value
func (o *IntegrationField) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *IntegrationField) SetServiceName(v string) {
	o.ServiceName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IntegrationField) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IntegrationField) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IntegrationField) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o IntegrationField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	toSerialize["integration_id"] = o.IntegrationId
	toSerialize["service_name"] = o.ServiceName
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IntegrationField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"value",
		"integration_id",
		"service_name",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationField := _IntegrationField{}

	err = json.Unmarshal(data, &varIntegrationField)

	if err != nil {
		return err
	}

	*o = IntegrationField(varIntegrationField)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "integration_id")
		delete(additionalProperties, "service_name")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIntegrationField struct {
	value *IntegrationField
	isSet bool
}

func (v NullableIntegrationField) Get() *IntegrationField {
	return v.value
}

func (v *NullableIntegrationField) Set(val *IntegrationField) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationField) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationField(val *IntegrationField) *NullableIntegrationField {
	return &NullableIntegrationField{value: val, isSet: true}
}

func (v NullableIntegrationField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


