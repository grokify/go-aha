/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the ReleaseWrap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseWrap{}

// ReleaseWrap struct for ReleaseWrap
type ReleaseWrap struct {
	Release *Release `json:"release,omitempty"`
}

// NewReleaseWrap instantiates a new ReleaseWrap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseWrap() *ReleaseWrap {
	this := ReleaseWrap{}
	return &this
}

// NewReleaseWrapWithDefaults instantiates a new ReleaseWrap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWrapWithDefaults() *ReleaseWrap {
	this := ReleaseWrap{}
	return &this
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *ReleaseWrap) GetRelease() Release {
	if o == nil || IsNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWrap) GetReleaseOk() (*Release, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *ReleaseWrap) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *ReleaseWrap) SetRelease(v Release) {
	o.Release = &v
}

func (o ReleaseWrap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseWrap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	return toSerialize, nil
}

type NullableReleaseWrap struct {
	value *ReleaseWrap
	isSet bool
}

func (v NullableReleaseWrap) Get() *ReleaseWrap {
	return v.value
}

func (v *NullableReleaseWrap) Set(val *ReleaseWrap) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseWrap) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseWrap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseWrap(val *ReleaseWrap) *NullableReleaseWrap {
	return &NullableReleaseWrap{value: val, isSet: true}
}

func (v NullableReleaseWrap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseWrap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
