/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
	"time"
)

// checks if the IdeaFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdeaFeature{}

// IdeaFeature struct for IdeaFeature
type IdeaFeature struct {
	Id *string `json:"id,omitempty"`
	ReferenceNum *string `json:"reference_num,omitempty"`
	Name *string `json:"name,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Url *string `json:"url,omitempty"`
	Resource *string `json:"resource,omitempty"`
	ProductId *string `json:"product_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdeaFeature IdeaFeature

// NewIdeaFeature instantiates a new IdeaFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdeaFeature() *IdeaFeature {
	this := IdeaFeature{}
	return &this
}

// NewIdeaFeatureWithDefaults instantiates a new IdeaFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdeaFeatureWithDefaults() *IdeaFeature {
	this := IdeaFeature{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdeaFeature) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdeaFeature) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdeaFeature) SetId(v string) {
	o.Id = &v
}

// GetReferenceNum returns the ReferenceNum field value if set, zero value otherwise.
func (o *IdeaFeature) GetReferenceNum() string {
	if o == nil || IsNil(o.ReferenceNum) {
		var ret string
		return ret
	}
	return *o.ReferenceNum
}

// GetReferenceNumOk returns a tuple with the ReferenceNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetReferenceNumOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceNum) {
		return nil, false
	}
	return o.ReferenceNum, true
}

// HasReferenceNum returns a boolean if a field has been set.
func (o *IdeaFeature) HasReferenceNum() bool {
	if o != nil && !IsNil(o.ReferenceNum) {
		return true
	}

	return false
}

// SetReferenceNum gets a reference to the given string and assigns it to the ReferenceNum field.
func (o *IdeaFeature) SetReferenceNum(v string) {
	o.ReferenceNum = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdeaFeature) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdeaFeature) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdeaFeature) SetName(v string) {
	o.Name = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IdeaFeature) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IdeaFeature) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IdeaFeature) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IdeaFeature) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IdeaFeature) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IdeaFeature) SetUrl(v string) {
	o.Url = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *IdeaFeature) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *IdeaFeature) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *IdeaFeature) SetResource(v string) {
	o.Resource = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *IdeaFeature) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaFeature) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *IdeaFeature) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *IdeaFeature) SetProductId(v string) {
	o.ProductId = &v
}

func (o IdeaFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdeaFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferenceNum) {
		toSerialize["reference_num"] = o.ReferenceNum
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdeaFeature) UnmarshalJSON(data []byte) (err error) {
	varIdeaFeature := _IdeaFeature{}

	err = json.Unmarshal(data, &varIdeaFeature)

	if err != nil {
		return err
	}

	*o = IdeaFeature(varIdeaFeature)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "reference_num")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "url")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "product_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdeaFeature struct {
	value *IdeaFeature
	isSet bool
}

func (v NullableIdeaFeature) Get() *IdeaFeature {
	return v.value
}

func (v *NullableIdeaFeature) Set(val *IdeaFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableIdeaFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableIdeaFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdeaFeature(val *IdeaFeature) *NullableIdeaFeature {
	return &NullableIdeaFeature{value: val, isSet: true}
}

func (v NullableIdeaFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdeaFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


