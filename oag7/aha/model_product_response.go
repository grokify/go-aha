/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the ProductResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductResponse{}

// ProductResponse struct for ProductResponse
type ProductResponse struct {
	Product *Product `json:"product,omitempty"`
}

// NewProductResponse instantiates a new ProductResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductResponse() *ProductResponse {
	this := ProductResponse{}
	return &this
}

// NewProductResponseWithDefaults instantiates a new ProductResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductResponseWithDefaults() *ProductResponse {
	this := ProductResponse{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ProductResponse) GetProduct() Product {
	if o == nil || IsNil(o.Product) {
		var ret Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductResponse) GetProductOk() (*Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ProductResponse) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given Product and assigns it to the Product field.
func (o *ProductResponse) SetProduct(v Product) {
	o.Product = &v
}

func (o ProductResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableProductResponse struct {
	value *ProductResponse
	isSet bool
}

func (v NullableProductResponse) Get() *ProductResponse {
	return v.value
}

func (v *NullableProductResponse) Set(val *ProductResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProductResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProductResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductResponse(val *ProductResponse) *NullableProductResponse {
	return &NullableProductResponse{value: val, isSet: true}
}

func (v NullableProductResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
