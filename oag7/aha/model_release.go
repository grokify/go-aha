/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the Release type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Release{}

// Release struct for Release
type Release struct {
	// A unique identifier for the release.
	Id *string `json:"id,omitempty"`
	// Release referenence number.
	ReferenceNum *string `json:"reference_num,omitempty"`
	// Release name.
	Name *string `json:"name,omitempty"`
	// Start date in YYYY-MM-DD format.
	StartDate *string `json:"start_date,omitempty"`
	// Release date in YYYY-MM-DD format.
	ReleaseDate *string `json:"release_date,omitempty"`
	// External release date in YYYY-MM-DD format.
	ExternalReleaseDate *string `json:"external_release_date,omitempty"`
	Released            *bool   `json:"released,omitempty"`
	ParkingLot          *bool   `json:"parking_lot,omitempty"`
	// Web URL for release.
	Url *string `json:"url,omitempty"`
	// API URL for release.
	Resource *string `json:"resource,omitempty"`
}

// NewRelease instantiates a new Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelease() *Release {
	this := Release{}
	return &this
}

// NewReleaseWithDefaults instantiates a new Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithDefaults() *Release {
	this := Release{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Release) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Release) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Release) SetId(v string) {
	o.Id = &v
}

// GetReferenceNum returns the ReferenceNum field value if set, zero value otherwise.
func (o *Release) GetReferenceNum() string {
	if o == nil || IsNil(o.ReferenceNum) {
		var ret string
		return ret
	}
	return *o.ReferenceNum
}

// GetReferenceNumOk returns a tuple with the ReferenceNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReferenceNumOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceNum) {
		return nil, false
	}
	return o.ReferenceNum, true
}

// HasReferenceNum returns a boolean if a field has been set.
func (o *Release) HasReferenceNum() bool {
	if o != nil && !IsNil(o.ReferenceNum) {
		return true
	}

	return false
}

// SetReferenceNum gets a reference to the given string and assigns it to the ReferenceNum field.
func (o *Release) SetReferenceNum(v string) {
	o.ReferenceNum = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Release) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Release) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Release) SetName(v string) {
	o.Name = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Release) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Release) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Release) SetStartDate(v string) {
	o.StartDate = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *Release) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *Release) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *Release) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetExternalReleaseDate returns the ExternalReleaseDate field value if set, zero value otherwise.
func (o *Release) GetExternalReleaseDate() string {
	if o == nil || IsNil(o.ExternalReleaseDate) {
		var ret string
		return ret
	}
	return *o.ExternalReleaseDate
}

// GetExternalReleaseDateOk returns a tuple with the ExternalReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetExternalReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalReleaseDate) {
		return nil, false
	}
	return o.ExternalReleaseDate, true
}

// HasExternalReleaseDate returns a boolean if a field has been set.
func (o *Release) HasExternalReleaseDate() bool {
	if o != nil && !IsNil(o.ExternalReleaseDate) {
		return true
	}

	return false
}

// SetExternalReleaseDate gets a reference to the given string and assigns it to the ExternalReleaseDate field.
func (o *Release) SetExternalReleaseDate(v string) {
	o.ExternalReleaseDate = &v
}

// GetReleased returns the Released field value if set, zero value otherwise.
func (o *Release) GetReleased() bool {
	if o == nil || IsNil(o.Released) {
		var ret bool
		return ret
	}
	return *o.Released
}

// GetReleasedOk returns a tuple with the Released field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReleasedOk() (*bool, bool) {
	if o == nil || IsNil(o.Released) {
		return nil, false
	}
	return o.Released, true
}

// HasReleased returns a boolean if a field has been set.
func (o *Release) HasReleased() bool {
	if o != nil && !IsNil(o.Released) {
		return true
	}

	return false
}

// SetReleased gets a reference to the given bool and assigns it to the Released field.
func (o *Release) SetReleased(v bool) {
	o.Released = &v
}

// GetParkingLot returns the ParkingLot field value if set, zero value otherwise.
func (o *Release) GetParkingLot() bool {
	if o == nil || IsNil(o.ParkingLot) {
		var ret bool
		return ret
	}
	return *o.ParkingLot
}

// GetParkingLotOk returns a tuple with the ParkingLot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetParkingLotOk() (*bool, bool) {
	if o == nil || IsNil(o.ParkingLot) {
		return nil, false
	}
	return o.ParkingLot, true
}

// HasParkingLot returns a boolean if a field has been set.
func (o *Release) HasParkingLot() bool {
	if o != nil && !IsNil(o.ParkingLot) {
		return true
	}

	return false
}

// SetParkingLot gets a reference to the given bool and assigns it to the ParkingLot field.
func (o *Release) SetParkingLot(v bool) {
	o.ParkingLot = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Release) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Release) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Release) SetUrl(v string) {
	o.Url = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Release) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Release) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *Release) SetResource(v string) {
	o.Resource = &v
}

func (o Release) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Release) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReferenceNum) {
		toSerialize["reference_num"] = o.ReferenceNum
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.ExternalReleaseDate) {
		toSerialize["external_release_date"] = o.ExternalReleaseDate
	}
	if !IsNil(o.Released) {
		toSerialize["released"] = o.Released
	}
	if !IsNil(o.ParkingLot) {
		toSerialize["parking_lot"] = o.ParkingLot
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableRelease struct {
	value *Release
	isSet bool
}

func (v NullableRelease) Get() *Release {
	return v.value
}

func (v *NullableRelease) Set(val *Release) {
	v.value = val
	v.isSet = true
}

func (v NullableRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelease(val *Release) *NullableRelease {
	return &NullableRelease{value: val, isSet: true}
}

func (v NullableRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
