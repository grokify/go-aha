/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the IdeaResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdeaResponse{}

// IdeaResponse struct for IdeaResponse
type IdeaResponse struct {
	Idea *Idea `json:"idea,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdeaResponse IdeaResponse

// NewIdeaResponse instantiates a new IdeaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdeaResponse() *IdeaResponse {
	this := IdeaResponse{}
	return &this
}

// NewIdeaResponseWithDefaults instantiates a new IdeaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdeaResponseWithDefaults() *IdeaResponse {
	this := IdeaResponse{}
	return &this
}

// GetIdea returns the Idea field value if set, zero value otherwise.
func (o *IdeaResponse) GetIdea() Idea {
	if o == nil || IsNil(o.Idea) {
		var ret Idea
		return ret
	}
	return *o.Idea
}

// GetIdeaOk returns a tuple with the Idea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdeaResponse) GetIdeaOk() (*Idea, bool) {
	if o == nil || IsNil(o.Idea) {
		return nil, false
	}
	return o.Idea, true
}

// HasIdea returns a boolean if a field has been set.
func (o *IdeaResponse) HasIdea() bool {
	if o != nil && !IsNil(o.Idea) {
		return true
	}

	return false
}

// SetIdea gets a reference to the given Idea and assigns it to the Idea field.
func (o *IdeaResponse) SetIdea(v Idea) {
	o.Idea = &v
}

func (o IdeaResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdeaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idea) {
		toSerialize["idea"] = o.Idea
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdeaResponse) UnmarshalJSON(data []byte) (err error) {
	varIdeaResponse := _IdeaResponse{}

	err = json.Unmarshal(data, &varIdeaResponse)

	if err != nil {
		return err
	}

	*o = IdeaResponse(varIdeaResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "idea")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdeaResponse struct {
	value *IdeaResponse
	isSet bool
}

func (v NullableIdeaResponse) Get() *IdeaResponse {
	return v.value
}

func (v *NullableIdeaResponse) Set(val *IdeaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIdeaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIdeaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdeaResponse(val *IdeaResponse) *NullableIdeaResponse {
	return &NullableIdeaResponse{value: val, isSet: true}
}

func (v NullableIdeaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdeaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


