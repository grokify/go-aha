/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Feature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Feature{}

// Feature 
type Feature struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	CommentsCount *int64 `json:"comments_count,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// Due date in YYYY-MM-DD format.
	DueDate *string `json:"due_date,omitempty"`
	Name string `json:"name"`
	ProductId *string `json:"product_id,omitempty"`
	ProgressSource *string `json:"progress_source,omitempty"`
	ReferenceNum string `json:"reference_num"`
	Release *Release `json:"release,omitempty"`
	// API URL for the resource.
	Resource *string `json:"resource,omitempty"`
	// Start date in YYYY-MM-DD format.
	StartDate *string `json:"start_date,omitempty"`
	Tags []string `json:"tags,omitempty"`
	// Web UI URL for the resource.
	Url *string `json:"url,omitempty"`
	UseRequirementsEstimates *bool `json:"use_requirements_estimates,omitempty"`
	WorkUnits *int64 `json:"work_units,omitempty"`
	WorkflowStatus *FeatureWorkflowStatus `json:"workflow_status,omitempty"`
	IntegrationFields []IntegrationField `json:"integration_fields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Feature Feature

// NewFeature instantiates a new Feature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeature(id string, createdAt time.Time, name string, referenceNum string) *Feature {
	this := Feature{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Name = name
	this.ReferenceNum = referenceNum
	return &this
}

// NewFeatureWithDefaults instantiates a new Feature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureWithDefaults() *Feature {
	this := Feature{}
	return &this
}

// GetId returns the Id field value
func (o *Feature) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Feature) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Feature) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Feature) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Feature) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Feature) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCommentsCount returns the CommentsCount field value if set, zero value otherwise.
func (o *Feature) GetCommentsCount() int64 {
	if o == nil || IsNil(o.CommentsCount) {
		var ret int64
		return ret
	}
	return *o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetCommentsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CommentsCount) {
		return nil, false
	}
	return o.CommentsCount, true
}

// HasCommentsCount returns a boolean if a field has been set.
func (o *Feature) HasCommentsCount() bool {
	if o != nil && !IsNil(o.CommentsCount) {
		return true
	}

	return false
}

// SetCommentsCount gets a reference to the given int64 and assigns it to the CommentsCount field.
func (o *Feature) SetCommentsCount(v int64) {
	o.CommentsCount = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Feature) GetCustomFields() []CustomField {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomField
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetCustomFieldsOk() ([]CustomField, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Feature) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomField and assigns it to the CustomFields field.
func (o *Feature) SetCustomFields(v []CustomField) {
	o.CustomFields = v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Feature) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Feature) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Feature) SetDueDate(v string) {
	o.DueDate = &v
}

// GetName returns the Name field value
func (o *Feature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Feature) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Feature) SetName(v string) {
	o.Name = v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *Feature) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *Feature) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *Feature) SetProductId(v string) {
	o.ProductId = &v
}

// GetProgressSource returns the ProgressSource field value if set, zero value otherwise.
func (o *Feature) GetProgressSource() string {
	if o == nil || IsNil(o.ProgressSource) {
		var ret string
		return ret
	}
	return *o.ProgressSource
}

// GetProgressSourceOk returns a tuple with the ProgressSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetProgressSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ProgressSource) {
		return nil, false
	}
	return o.ProgressSource, true
}

// HasProgressSource returns a boolean if a field has been set.
func (o *Feature) HasProgressSource() bool {
	if o != nil && !IsNil(o.ProgressSource) {
		return true
	}

	return false
}

// SetProgressSource gets a reference to the given string and assigns it to the ProgressSource field.
func (o *Feature) SetProgressSource(v string) {
	o.ProgressSource = &v
}

// GetReferenceNum returns the ReferenceNum field value
func (o *Feature) GetReferenceNum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceNum
}

// GetReferenceNumOk returns a tuple with the ReferenceNum field value
// and a boolean to check if the value has been set.
func (o *Feature) GetReferenceNumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceNum, true
}

// SetReferenceNum sets field value
func (o *Feature) SetReferenceNum(v string) {
	o.ReferenceNum = v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *Feature) GetRelease() Release {
	if o == nil || IsNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetReleaseOk() (*Release, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Feature) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *Feature) SetRelease(v Release) {
	o.Release = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Feature) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Feature) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *Feature) SetResource(v string) {
	o.Resource = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Feature) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Feature) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Feature) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Feature) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Feature) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Feature) SetTags(v []string) {
	o.Tags = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Feature) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Feature) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Feature) SetUrl(v string) {
	o.Url = &v
}

// GetUseRequirementsEstimates returns the UseRequirementsEstimates field value if set, zero value otherwise.
func (o *Feature) GetUseRequirementsEstimates() bool {
	if o == nil || IsNil(o.UseRequirementsEstimates) {
		var ret bool
		return ret
	}
	return *o.UseRequirementsEstimates
}

// GetUseRequirementsEstimatesOk returns a tuple with the UseRequirementsEstimates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetUseRequirementsEstimatesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRequirementsEstimates) {
		return nil, false
	}
	return o.UseRequirementsEstimates, true
}

// HasUseRequirementsEstimates returns a boolean if a field has been set.
func (o *Feature) HasUseRequirementsEstimates() bool {
	if o != nil && !IsNil(o.UseRequirementsEstimates) {
		return true
	}

	return false
}

// SetUseRequirementsEstimates gets a reference to the given bool and assigns it to the UseRequirementsEstimates field.
func (o *Feature) SetUseRequirementsEstimates(v bool) {
	o.UseRequirementsEstimates = &v
}

// GetWorkUnits returns the WorkUnits field value if set, zero value otherwise.
func (o *Feature) GetWorkUnits() int64 {
	if o == nil || IsNil(o.WorkUnits) {
		var ret int64
		return ret
	}
	return *o.WorkUnits
}

// GetWorkUnitsOk returns a tuple with the WorkUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetWorkUnitsOk() (*int64, bool) {
	if o == nil || IsNil(o.WorkUnits) {
		return nil, false
	}
	return o.WorkUnits, true
}

// HasWorkUnits returns a boolean if a field has been set.
func (o *Feature) HasWorkUnits() bool {
	if o != nil && !IsNil(o.WorkUnits) {
		return true
	}

	return false
}

// SetWorkUnits gets a reference to the given int64 and assigns it to the WorkUnits field.
func (o *Feature) SetWorkUnits(v int64) {
	o.WorkUnits = &v
}

// GetWorkflowStatus returns the WorkflowStatus field value if set, zero value otherwise.
func (o *Feature) GetWorkflowStatus() FeatureWorkflowStatus {
	if o == nil || IsNil(o.WorkflowStatus) {
		var ret FeatureWorkflowStatus
		return ret
	}
	return *o.WorkflowStatus
}

// GetWorkflowStatusOk returns a tuple with the WorkflowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetWorkflowStatusOk() (*FeatureWorkflowStatus, bool) {
	if o == nil || IsNil(o.WorkflowStatus) {
		return nil, false
	}
	return o.WorkflowStatus, true
}

// HasWorkflowStatus returns a boolean if a field has been set.
func (o *Feature) HasWorkflowStatus() bool {
	if o != nil && !IsNil(o.WorkflowStatus) {
		return true
	}

	return false
}

// SetWorkflowStatus gets a reference to the given FeatureWorkflowStatus and assigns it to the WorkflowStatus field.
func (o *Feature) SetWorkflowStatus(v FeatureWorkflowStatus) {
	o.WorkflowStatus = &v
}

// GetIntegrationFields returns the IntegrationFields field value if set, zero value otherwise.
func (o *Feature) GetIntegrationFields() []IntegrationField {
	if o == nil || IsNil(o.IntegrationFields) {
		var ret []IntegrationField
		return ret
	}
	return o.IntegrationFields
}

// GetIntegrationFieldsOk returns a tuple with the IntegrationFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Feature) GetIntegrationFieldsOk() ([]IntegrationField, bool) {
	if o == nil || IsNil(o.IntegrationFields) {
		return nil, false
	}
	return o.IntegrationFields, true
}

// HasIntegrationFields returns a boolean if a field has been set.
func (o *Feature) HasIntegrationFields() bool {
	if o != nil && !IsNil(o.IntegrationFields) {
		return true
	}

	return false
}

// SetIntegrationFields gets a reference to the given []IntegrationField and assigns it to the IntegrationFields field.
func (o *Feature) SetIntegrationFields(v []IntegrationField) {
	o.IntegrationFields = v
}

func (o Feature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Feature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.CommentsCount) {
		toSerialize["comments_count"] = o.CommentsCount
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.ProgressSource) {
		toSerialize["progress_source"] = o.ProgressSource
	}
	toSerialize["reference_num"] = o.ReferenceNum
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseRequirementsEstimates) {
		toSerialize["use_requirements_estimates"] = o.UseRequirementsEstimates
	}
	if !IsNil(o.WorkUnits) {
		toSerialize["work_units"] = o.WorkUnits
	}
	if !IsNil(o.WorkflowStatus) {
		toSerialize["workflow_status"] = o.WorkflowStatus
	}
	if !IsNil(o.IntegrationFields) {
		toSerialize["integration_fields"] = o.IntegrationFields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Feature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"name",
		"reference_num",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeature := _Feature{}

	err = json.Unmarshal(data, &varFeature)

	if err != nil {
		return err
	}

	*o = Feature(varFeature)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "comments_count")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "due_date")
		delete(additionalProperties, "name")
		delete(additionalProperties, "product_id")
		delete(additionalProperties, "progress_source")
		delete(additionalProperties, "reference_num")
		delete(additionalProperties, "release")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "url")
		delete(additionalProperties, "use_requirements_estimates")
		delete(additionalProperties, "work_units")
		delete(additionalProperties, "workflow_status")
		delete(additionalProperties, "integration_fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeature struct {
	value *Feature
	isSet bool
}

func (v NullableFeature) Get() *Feature {
	return v.value
}

func (v *NullableFeature) Set(val *Feature) {
	v.value = val
	v.isSet = true
}

func (v NullableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeature(val *Feature) *NullableFeature {
	return &NullableFeature{value: val, isSet: true}
}

func (v NullableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


