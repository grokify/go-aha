/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the FeatureUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureUpdate{}

// FeatureUpdate struct for FeatureUpdate
type FeatureUpdate struct {
	// Name of the feature
	Name *string `json:"name,omitempty"`
	// Description of the feature and it can include HTML formatting.
	Description *string `json:"description,omitempty"`
	// Email address of user that created the feature.
	CreatedBy *string `json:"created_by,omitempty"`
	// Email address of user that is assigned the feature.
	AssignedToUser *string `json:"assigned_to_user,omitempty"`
	// Tags can be automatically assigned to the new feature. If more than one tag is used then tags should be separated by commas
	Tags *string `json:"tags,omitempty"`
	// Set the original estimated effort in a text format, you can use d, h, min (or 'p' for points) to indicate the units to use.
	OriginalEstimateText *string `json:"original_estimate_text,omitempty"`
	//  Set the remaining estimated effort in a text format, you can use d, h, min (or 'p' for points) to indicate the units to use.
	RemainingEstimateText *string `json:"remaining_estimate_text,omitempty"`
	// Date that work will start on the feature in format YYYY-MM-DD.
	StartDate *string `json:"start_date,omitempty"`
	// Date that work is due to be completed on the feature in format YYYY-MM-DD.
	DueDate *string `json:"due_date,omitempty"`
	// Name or id of release phase which the feature belongs to.
	ReleasePhase *string `json:"release_phase,omitempty"`
	// Name or id of initiative which the feature belongs to.
	Initiative *string `json:"initiative,omitempty"`
	// Name or id of master feature which the feature belongs to.
	MasterFeature *string `json:"master_feature,omitempty"`
}

// NewFeatureUpdate instantiates a new FeatureUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureUpdate() *FeatureUpdate {
	this := FeatureUpdate{}
	return &this
}

// NewFeatureUpdateWithDefaults instantiates a new FeatureUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureUpdateWithDefaults() *FeatureUpdate {
	this := FeatureUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FeatureUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FeatureUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FeatureUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FeatureUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FeatureUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FeatureUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *FeatureUpdate) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *FeatureUpdate) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *FeatureUpdate) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetAssignedToUser returns the AssignedToUser field value if set, zero value otherwise.
func (o *FeatureUpdate) GetAssignedToUser() string {
	if o == nil || IsNil(o.AssignedToUser) {
		var ret string
		return ret
	}
	return *o.AssignedToUser
}

// GetAssignedToUserOk returns a tuple with the AssignedToUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetAssignedToUserOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedToUser) {
		return nil, false
	}
	return o.AssignedToUser, true
}

// HasAssignedToUser returns a boolean if a field has been set.
func (o *FeatureUpdate) HasAssignedToUser() bool {
	if o != nil && !IsNil(o.AssignedToUser) {
		return true
	}

	return false
}

// SetAssignedToUser gets a reference to the given string and assigns it to the AssignedToUser field.
func (o *FeatureUpdate) SetAssignedToUser(v string) {
	o.AssignedToUser = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FeatureUpdate) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FeatureUpdate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *FeatureUpdate) SetTags(v string) {
	o.Tags = &v
}

// GetOriginalEstimateText returns the OriginalEstimateText field value if set, zero value otherwise.
func (o *FeatureUpdate) GetOriginalEstimateText() string {
	if o == nil || IsNil(o.OriginalEstimateText) {
		var ret string
		return ret
	}
	return *o.OriginalEstimateText
}

// GetOriginalEstimateTextOk returns a tuple with the OriginalEstimateText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetOriginalEstimateTextOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalEstimateText) {
		return nil, false
	}
	return o.OriginalEstimateText, true
}

// HasOriginalEstimateText returns a boolean if a field has been set.
func (o *FeatureUpdate) HasOriginalEstimateText() bool {
	if o != nil && !IsNil(o.OriginalEstimateText) {
		return true
	}

	return false
}

// SetOriginalEstimateText gets a reference to the given string and assigns it to the OriginalEstimateText field.
func (o *FeatureUpdate) SetOriginalEstimateText(v string) {
	o.OriginalEstimateText = &v
}

// GetRemainingEstimateText returns the RemainingEstimateText field value if set, zero value otherwise.
func (o *FeatureUpdate) GetRemainingEstimateText() string {
	if o == nil || IsNil(o.RemainingEstimateText) {
		var ret string
		return ret
	}
	return *o.RemainingEstimateText
}

// GetRemainingEstimateTextOk returns a tuple with the RemainingEstimateText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetRemainingEstimateTextOk() (*string, bool) {
	if o == nil || IsNil(o.RemainingEstimateText) {
		return nil, false
	}
	return o.RemainingEstimateText, true
}

// HasRemainingEstimateText returns a boolean if a field has been set.
func (o *FeatureUpdate) HasRemainingEstimateText() bool {
	if o != nil && !IsNil(o.RemainingEstimateText) {
		return true
	}

	return false
}

// SetRemainingEstimateText gets a reference to the given string and assigns it to the RemainingEstimateText field.
func (o *FeatureUpdate) SetRemainingEstimateText(v string) {
	o.RemainingEstimateText = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *FeatureUpdate) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *FeatureUpdate) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *FeatureUpdate) SetStartDate(v string) {
	o.StartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *FeatureUpdate) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *FeatureUpdate) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *FeatureUpdate) SetDueDate(v string) {
	o.DueDate = &v
}

// GetReleasePhase returns the ReleasePhase field value if set, zero value otherwise.
func (o *FeatureUpdate) GetReleasePhase() string {
	if o == nil || IsNil(o.ReleasePhase) {
		var ret string
		return ret
	}
	return *o.ReleasePhase
}

// GetReleasePhaseOk returns a tuple with the ReleasePhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetReleasePhaseOk() (*string, bool) {
	if o == nil || IsNil(o.ReleasePhase) {
		return nil, false
	}
	return o.ReleasePhase, true
}

// HasReleasePhase returns a boolean if a field has been set.
func (o *FeatureUpdate) HasReleasePhase() bool {
	if o != nil && !IsNil(o.ReleasePhase) {
		return true
	}

	return false
}

// SetReleasePhase gets a reference to the given string and assigns it to the ReleasePhase field.
func (o *FeatureUpdate) SetReleasePhase(v string) {
	o.ReleasePhase = &v
}

// GetInitiative returns the Initiative field value if set, zero value otherwise.
func (o *FeatureUpdate) GetInitiative() string {
	if o == nil || IsNil(o.Initiative) {
		var ret string
		return ret
	}
	return *o.Initiative
}

// GetInitiativeOk returns a tuple with the Initiative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetInitiativeOk() (*string, bool) {
	if o == nil || IsNil(o.Initiative) {
		return nil, false
	}
	return o.Initiative, true
}

// HasInitiative returns a boolean if a field has been set.
func (o *FeatureUpdate) HasInitiative() bool {
	if o != nil && !IsNil(o.Initiative) {
		return true
	}

	return false
}

// SetInitiative gets a reference to the given string and assigns it to the Initiative field.
func (o *FeatureUpdate) SetInitiative(v string) {
	o.Initiative = &v
}

// GetMasterFeature returns the MasterFeature field value if set, zero value otherwise.
func (o *FeatureUpdate) GetMasterFeature() string {
	if o == nil || IsNil(o.MasterFeature) {
		var ret string
		return ret
	}
	return *o.MasterFeature
}

// GetMasterFeatureOk returns a tuple with the MasterFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureUpdate) GetMasterFeatureOk() (*string, bool) {
	if o == nil || IsNil(o.MasterFeature) {
		return nil, false
	}
	return o.MasterFeature, true
}

// HasMasterFeature returns a boolean if a field has been set.
func (o *FeatureUpdate) HasMasterFeature() bool {
	if o != nil && !IsNil(o.MasterFeature) {
		return true
	}

	return false
}

// SetMasterFeature gets a reference to the given string and assigns it to the MasterFeature field.
func (o *FeatureUpdate) SetMasterFeature(v string) {
	o.MasterFeature = &v
}

func (o FeatureUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.AssignedToUser) {
		toSerialize["assigned_to_user"] = o.AssignedToUser
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.OriginalEstimateText) {
		toSerialize["original_estimate_text"] = o.OriginalEstimateText
	}
	if !IsNil(o.RemainingEstimateText) {
		toSerialize["remaining_estimate_text"] = o.RemainingEstimateText
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.ReleasePhase) {
		toSerialize["release_phase"] = o.ReleasePhase
	}
	if !IsNil(o.Initiative) {
		toSerialize["initiative"] = o.Initiative
	}
	if !IsNil(o.MasterFeature) {
		toSerialize["master_feature"] = o.MasterFeature
	}
	return toSerialize, nil
}

type NullableFeatureUpdate struct {
	value *FeatureUpdate
	isSet bool
}

func (v NullableFeatureUpdate) Get() *FeatureUpdate {
	return v.value
}

func (v *NullableFeatureUpdate) Set(val *FeatureUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureUpdate(val *FeatureUpdate) *NullableFeatureUpdate {
	return &NullableFeatureUpdate{value: val, isSet: true}
}

func (v NullableFeatureUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
