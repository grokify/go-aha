/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the ReleaseUpdateWrap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseUpdateWrap{}

// ReleaseUpdateWrap struct for ReleaseUpdateWrap
type ReleaseUpdateWrap struct {
	Release *ReleaseUpdate `json:"release,omitempty"`
}

// NewReleaseUpdateWrap instantiates a new ReleaseUpdateWrap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseUpdateWrap() *ReleaseUpdateWrap {
	this := ReleaseUpdateWrap{}
	return &this
}

// NewReleaseUpdateWrapWithDefaults instantiates a new ReleaseUpdateWrap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseUpdateWrapWithDefaults() *ReleaseUpdateWrap {
	this := ReleaseUpdateWrap{}
	return &this
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *ReleaseUpdateWrap) GetRelease() ReleaseUpdate {
	if o == nil || IsNil(o.Release) {
		var ret ReleaseUpdate
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdateWrap) GetReleaseOk() (*ReleaseUpdate, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *ReleaseUpdateWrap) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given ReleaseUpdate and assigns it to the Release field.
func (o *ReleaseUpdateWrap) SetRelease(v ReleaseUpdate) {
	o.Release = &v
}

func (o ReleaseUpdateWrap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseUpdateWrap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	return toSerialize, nil
}

type NullableReleaseUpdateWrap struct {
	value *ReleaseUpdateWrap
	isSet bool
}

func (v NullableReleaseUpdateWrap) Get() *ReleaseUpdateWrap {
	return v.value
}

func (v *NullableReleaseUpdateWrap) Set(val *ReleaseUpdateWrap) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseUpdateWrap) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseUpdateWrap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseUpdateWrap(val *ReleaseUpdateWrap) *NullableReleaseUpdateWrap {
	return &NullableReleaseUpdateWrap{value: val, isSet: true}
}

func (v NullableReleaseUpdateWrap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseUpdateWrap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
