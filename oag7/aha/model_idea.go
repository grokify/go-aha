/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Idea type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Idea{}

// Idea struct for Idea
type Idea struct {
	Id string `json:"id"`
	Name string `json:"name"`
	ReferenceNum string `json:"reference_num"`
	Feature *IdeaFeature `json:"feature,omitempty"`
	WorkflowStatus *FeatureWorkflowStatus `json:"workflow_status,omitempty"`
	Categories []Category `json:"categories"`
	Votes int32 `json:"votes"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	StatusChangedAt time.Time `json:"status_changed_at"`
	AdditionalProperties map[string]interface{}
}

type _Idea Idea

// NewIdea instantiates a new Idea object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdea(id string, name string, referenceNum string, categories []Category, votes int32, createdAt time.Time, updatedAt time.Time, statusChangedAt time.Time) *Idea {
	this := Idea{}
	this.Id = id
	this.Name = name
	this.ReferenceNum = referenceNum
	this.Categories = categories
	this.Votes = votes
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.StatusChangedAt = statusChangedAt
	return &this
}

// NewIdeaWithDefaults instantiates a new Idea object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdeaWithDefaults() *Idea {
	this := Idea{}
	return &this
}

// GetId returns the Id field value
func (o *Idea) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Idea) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Idea) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Idea) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Idea) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Idea) SetName(v string) {
	o.Name = v
}

// GetReferenceNum returns the ReferenceNum field value
func (o *Idea) GetReferenceNum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceNum
}

// GetReferenceNumOk returns a tuple with the ReferenceNum field value
// and a boolean to check if the value has been set.
func (o *Idea) GetReferenceNumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceNum, true
}

// SetReferenceNum sets field value
func (o *Idea) SetReferenceNum(v string) {
	o.ReferenceNum = v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *Idea) GetFeature() IdeaFeature {
	if o == nil || IsNil(o.Feature) {
		var ret IdeaFeature
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Idea) GetFeatureOk() (*IdeaFeature, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *Idea) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given IdeaFeature and assigns it to the Feature field.
func (o *Idea) SetFeature(v IdeaFeature) {
	o.Feature = &v
}

// GetWorkflowStatus returns the WorkflowStatus field value if set, zero value otherwise.
func (o *Idea) GetWorkflowStatus() FeatureWorkflowStatus {
	if o == nil || IsNil(o.WorkflowStatus) {
		var ret FeatureWorkflowStatus
		return ret
	}
	return *o.WorkflowStatus
}

// GetWorkflowStatusOk returns a tuple with the WorkflowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Idea) GetWorkflowStatusOk() (*FeatureWorkflowStatus, bool) {
	if o == nil || IsNil(o.WorkflowStatus) {
		return nil, false
	}
	return o.WorkflowStatus, true
}

// HasWorkflowStatus returns a boolean if a field has been set.
func (o *Idea) HasWorkflowStatus() bool {
	if o != nil && !IsNil(o.WorkflowStatus) {
		return true
	}

	return false
}

// SetWorkflowStatus gets a reference to the given FeatureWorkflowStatus and assigns it to the WorkflowStatus field.
func (o *Idea) SetWorkflowStatus(v FeatureWorkflowStatus) {
	o.WorkflowStatus = &v
}

// GetCategories returns the Categories field value
func (o *Idea) GetCategories() []Category {
	if o == nil {
		var ret []Category
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *Idea) GetCategoriesOk() ([]Category, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *Idea) SetCategories(v []Category) {
	o.Categories = v
}

// GetVotes returns the Votes field value
func (o *Idea) GetVotes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Votes
}

// GetVotesOk returns a tuple with the Votes field value
// and a boolean to check if the value has been set.
func (o *Idea) GetVotesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Votes, true
}

// SetVotes sets field value
func (o *Idea) SetVotes(v int32) {
	o.Votes = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Idea) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Idea) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Idea) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Idea) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Idea) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Idea) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetStatusChangedAt returns the StatusChangedAt field value
func (o *Idea) GetStatusChangedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StatusChangedAt
}

// GetStatusChangedAtOk returns a tuple with the StatusChangedAt field value
// and a boolean to check if the value has been set.
func (o *Idea) GetStatusChangedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusChangedAt, true
}

// SetStatusChangedAt sets field value
func (o *Idea) SetStatusChangedAt(v time.Time) {
	o.StatusChangedAt = v
}

func (o Idea) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Idea) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["reference_num"] = o.ReferenceNum
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !IsNil(o.WorkflowStatus) {
		toSerialize["workflow_status"] = o.WorkflowStatus
	}
	toSerialize["categories"] = o.Categories
	toSerialize["votes"] = o.Votes
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["status_changed_at"] = o.StatusChangedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Idea) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"reference_num",
		"categories",
		"votes",
		"created_at",
		"updated_at",
		"status_changed_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdea := _Idea{}

	err = json.Unmarshal(data, &varIdea)

	if err != nil {
		return err
	}

	*o = Idea(varIdea)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "reference_num")
		delete(additionalProperties, "feature")
		delete(additionalProperties, "workflow_status")
		delete(additionalProperties, "categories")
		delete(additionalProperties, "votes")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "status_changed_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdea struct {
	value *Idea
	isSet bool
}

func (v NullableIdea) Get() *Idea {
	return v.value
}

func (v *NullableIdea) Set(val *Idea) {
	v.value = val
	v.isSet = true
}

func (v NullableIdea) IsSet() bool {
	return v.isSet
}

func (v *NullableIdea) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdea(val *Idea) *NullableIdea {
	return &NullableIdea{value: val, isSet: true}
}

func (v NullableIdea) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdea) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


