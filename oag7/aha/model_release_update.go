/*
Aha.io API

Articles that matter on social publishing platform

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aha

import (
	"encoding/json"
)

// checks if the ReleaseUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseUpdate{}

// ReleaseUpdate struct for ReleaseUpdate
type ReleaseUpdate struct {
	// Release name.
	Name *string `json:"name,omitempty"`
	// Start date in YYYY-MM-DD format.
	StartDate *string `json:"start_date,omitempty"`
	// Release date in YYYY-MM-DD format.
	ReleaseDate *string `json:"release_date,omitempty"`
	// Date Development started in format YYYY-MM-DD
	DevelopmentStartedOn *string `json:"development_started_on,omitempty"`
	// The external release date for this feature in format YYYY-MM-DD
	ExternalReleaseDate *string `json:"external_release_date,omitempty"`
	ParkingLot          *bool   `json:"parking_lot,omitempty"`
}

// NewReleaseUpdate instantiates a new ReleaseUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseUpdate() *ReleaseUpdate {
	this := ReleaseUpdate{}
	return &this
}

// NewReleaseUpdateWithDefaults instantiates a new ReleaseUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseUpdateWithDefaults() *ReleaseUpdate {
	this := ReleaseUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReleaseUpdate) SetName(v string) {
	o.Name = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReleaseUpdate) SetStartDate(v string) {
	o.StartDate = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *ReleaseUpdate) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetDevelopmentStartedOn returns the DevelopmentStartedOn field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetDevelopmentStartedOn() string {
	if o == nil || IsNil(o.DevelopmentStartedOn) {
		var ret string
		return ret
	}
	return *o.DevelopmentStartedOn
}

// GetDevelopmentStartedOnOk returns a tuple with the DevelopmentStartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetDevelopmentStartedOnOk() (*string, bool) {
	if o == nil || IsNil(o.DevelopmentStartedOn) {
		return nil, false
	}
	return o.DevelopmentStartedOn, true
}

// HasDevelopmentStartedOn returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasDevelopmentStartedOn() bool {
	if o != nil && !IsNil(o.DevelopmentStartedOn) {
		return true
	}

	return false
}

// SetDevelopmentStartedOn gets a reference to the given string and assigns it to the DevelopmentStartedOn field.
func (o *ReleaseUpdate) SetDevelopmentStartedOn(v string) {
	o.DevelopmentStartedOn = &v
}

// GetExternalReleaseDate returns the ExternalReleaseDate field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetExternalReleaseDate() string {
	if o == nil || IsNil(o.ExternalReleaseDate) {
		var ret string
		return ret
	}
	return *o.ExternalReleaseDate
}

// GetExternalReleaseDateOk returns a tuple with the ExternalReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetExternalReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalReleaseDate) {
		return nil, false
	}
	return o.ExternalReleaseDate, true
}

// HasExternalReleaseDate returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasExternalReleaseDate() bool {
	if o != nil && !IsNil(o.ExternalReleaseDate) {
		return true
	}

	return false
}

// SetExternalReleaseDate gets a reference to the given string and assigns it to the ExternalReleaseDate field.
func (o *ReleaseUpdate) SetExternalReleaseDate(v string) {
	o.ExternalReleaseDate = &v
}

// GetParkingLot returns the ParkingLot field value if set, zero value otherwise.
func (o *ReleaseUpdate) GetParkingLot() bool {
	if o == nil || IsNil(o.ParkingLot) {
		var ret bool
		return ret
	}
	return *o.ParkingLot
}

// GetParkingLotOk returns a tuple with the ParkingLot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseUpdate) GetParkingLotOk() (*bool, bool) {
	if o == nil || IsNil(o.ParkingLot) {
		return nil, false
	}
	return o.ParkingLot, true
}

// HasParkingLot returns a boolean if a field has been set.
func (o *ReleaseUpdate) HasParkingLot() bool {
	if o != nil && !IsNil(o.ParkingLot) {
		return true
	}

	return false
}

// SetParkingLot gets a reference to the given bool and assigns it to the ParkingLot field.
func (o *ReleaseUpdate) SetParkingLot(v bool) {
	o.ParkingLot = &v
}

func (o ReleaseUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.DevelopmentStartedOn) {
		toSerialize["development_started_on"] = o.DevelopmentStartedOn
	}
	if !IsNil(o.ExternalReleaseDate) {
		toSerialize["external_release_date"] = o.ExternalReleaseDate
	}
	if !IsNil(o.ParkingLot) {
		toSerialize["parking_lot"] = o.ParkingLot
	}
	return toSerialize, nil
}

type NullableReleaseUpdate struct {
	value *ReleaseUpdate
	isSet bool
}

func (v NullableReleaseUpdate) Get() *ReleaseUpdate {
	return v.value
}

func (v *NullableReleaseUpdate) Set(val *ReleaseUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseUpdate(val *ReleaseUpdate) *NullableReleaseUpdate {
	return &NullableReleaseUpdate{value: val, isSet: true}
}

func (v NullableReleaseUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
